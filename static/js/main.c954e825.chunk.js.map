{"version":3,"sources":["components/GlobalStyle.js","images/lilac-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","delayletter","Promise","resolve","setTimeout","delayWord","Main","styled","main","Img","div","props","img","SpanMainKeyWord","span","a11yHidden","css","App","mainKeyWord","useRef","useEffect","mainKeyword","current","mainKeywordArray","keywordAnimation","a","loopCount","textSplit","count","reduce","acc","obj","push","split","concat","length","append","textContent","Myimg","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA2BeA,G,MAxBKC,YAAH,gfCHF,MAA0B,qC,OCOzC,SAASC,IACP,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAEtD,SAASE,IACP,OAAO,IAAIH,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAGtD,IAAMG,EAAOC,IAAOC,KAAV,unBAgCJC,EAAMF,IAAOG,IAAV,uRAWiB,SAAAC,GAAK,OAAIA,EAAMC,OAInCC,EAAkBN,IAAOO,KAAV,gTAKjB,SAAAH,GAAK,OAAIA,EAAMI,YACfC,YADS,uMAsFEC,MAjEf,WACE,IAAMC,EAAcC,mBA4CpB,OA1CAC,qBAAU,WACR,IAAMC,EAAcH,EAAYI,QAE1BC,EAAmB,CACvB,wCACA,oDACA,qDAGIC,EAAgB,uCAAG,4CAAAC,EAAA,sDAAOC,EAAP,+BAAmB,EACtCC,EAAY,GACZC,EAAQ,EAEZD,EAAYJ,EAAiBM,QAAO,SAACC,EAAKR,GACxC,IAAIS,EAAM,GAGV,OAFAA,EAAIC,KAAKV,EAAQW,MAAM,KACvBH,EAAMA,EAAII,OAAOH,KAEhB,IAToB,YAWhBL,IAAcC,EAAUQ,QAAUP,EAAQD,EAAUD,GAAWS,QAX/C,iCAaflC,IAbe,UAcrBoB,EAAYe,OAAOT,EAAUD,GAAWE,IAGpCA,IAAUD,EAAUD,GAAWS,OAAS,EAjBvB,kCAkBb9B,IAlBa,eAoBnBsB,EAAUQ,OAAS,IAAMT,EACrBF,EAAkBE,EAAY,GAC9BF,EAAiBE,EAAY,GAEjCL,EAAYgB,YAAc,GAxBP,mBAyBZ,GAzBY,QA2BrBT,IA3BqB,2DAAH,qDA8BtBJ,OAIA,qCACE,cAAC,EAAD,IACA,eAAClB,EAAD,WACE,cAACG,EAAD,CAAKG,IAAK0B,IACV,qEAEE,cAACzB,EAAD,CAAiBE,YAAY,EAA7B,gKAIA,cAACF,EAAD,CAAiB0B,IAAKrB,IAA+B,uBANvD,sGC7HOsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c954e825.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    \r\n    body {\r\n        -webkit-transition: all 1s;\r\n        transition: all 1s;\r\n        width: 100%;\r\n        margin: 0 auto;\r\n        letter-spacing: -0.025rem;\r\n        font-family: 'Nanum Gothic', sans-serif;\r\n    }\r\n\r\n    body.active {\r\n        overflow: hidden;\r\n        -ms-overflow-style: none;\r\n        /* IE and Edge */\r\n        scrollbar-width: none;\r\n        /* Firefox */\r\n    }\r\n\r\n    body.active::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n`\r\n\r\nexport default GlobalStyle;","export default __webpack_public_path__ + \"static/media/lilac-bg.f9356c39.jpg\";","import { useEffect, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport './App.css';\nimport GlobalStyle from './components/GlobalStyle';\nimport Myimg from './images/lilac-bg.jpg'\n\n\nfunction delayletter() {\n  return new Promise((resolve) => setTimeout(resolve, 200));\n};\nfunction delayWord() {\n  return new Promise((resolve) => setTimeout(resolve, 1000));\n};\n\nconst Main = styled.main`\n  font-family: 'Noto Sans KR', sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  height: 100vh;\n  overflow: hidden;\n  background: #a2a1dc;\n\n  & h1 {\n      position: absolute;\n      color: #1d1720;\n      font-size: 4rem;\n      font-weight: 400;\n      text-shadow: 0 0 40px #e3d0eb;\n      opacity: 0;\n      line-height: 1.4;\n      text-align: left;\n      animation: 0.5s linear 0.5s forwards main-text;\n\n      @keyframes main-text {\n      0% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 1;\n      }\n    }\n  }\n`\n//img -> div https://stackoverflow.com/questions/8200204/fit-background-image-to-div\nconst Img = styled.div`\n  position: absolute;\n  top: -100px;\n  left: -100px;\n  z-index: 0;\n  width: calc(100% + 200px);\n  height: calc(100% + 200px);\n  \n  opacity: 0.9;\n  transition: all 0.3s linear 0s;\n  \n  background-image: url(${props => props.img});\n  background-size: cover ;\n`\n\nconst SpanMainKeyWord = styled.span`\n  padding-right: 5px;\n  font-weight: 600;\n  animation: 0.1s linear infinite keyword-typing-effect;\n\n  ${props => props.a11yHidden &&\n    css`\n      overflow: hidden;\n      position: absolute;\n      width: 1px;\n      height: 1px;\n      clip: rect(0, 0, 0, 0);\n      clip-path: polygon(0 0, 0 0, 0 0);\n    `\n  }\n\n  @keyframes keyword-typing-effect {\n    0% {\n      border-right: 4px solid transparent;\n    }\n    100% {\n      border-right: 4px solid #1d1720;\n    }\n  }\n`\n\nfunction App() {\n  const mainKeyWord = useRef()\n\n  useEffect(() => {\n    const mainKeyword = mainKeyWord.current\n\n    const mainKeywordArray = [\n      '깊이 생각하는',\n      '끈기있게 탐구하는',\n      '문서화를 좋아하는',\n    ];\n\n    const keywordAnimation = async (loopCount = 0) => {\n      let textSplit = [];\n      let count = 0;\n\n      textSplit = mainKeywordArray.reduce((acc, current) => {\n        let obj = []\n        obj.push(current.split(''))\n        acc = acc.concat(obj)\n        return acc\n      }, [])\n\n      while (loopCount !== textSplit.length && count < textSplit[loopCount].length) {\n        // 글자 노출\n        await delayletter();\n        mainKeyword.append(textSplit[loopCount][count]);\n\n        // 끝나면 초기화\n        if (count === textSplit[loopCount].length - 1) {\n          await delayWord();\n\n          textSplit.length - 1 === loopCount\n            ? keywordAnimation((loopCount = 0))\n            : keywordAnimation(loopCount + 1);\n\n          mainKeyword.textContent = '';\n          return false;\n        }\n        count++;\n      }\n    };\n    keywordAnimation();\n  })\n\n  return (\n    <>\n      <GlobalStyle />\n      <Main>\n        <Img img={Myimg} />\n        <h1>\n          안녕하세요!&nbsp;\n          <SpanMainKeyWord a11yHidden={true} >\n            '깊이 생각하는', '끈기있게 탐구하는', '문서화를 좋아하는',\n          </SpanMainKeyWord>\n\n          <SpanMainKeyWord ref={mainKeyWord}></SpanMainKeyWord><br />\n          프론트엔드 개발자 오세현입니다 :D\n        </h1>\n      </Main>\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}