{"version":3,"sources":["util/commFunction.js","components/GlobalStyle.js","images/lilac-bg.jpg","App.js","reportWebVitals.js","index.js"],"names":["delayletter","Promise","resolve","setTimeout","delayWord","GlobalStyle","createGlobalStyle","mainKeywordArray","Main","styled","main","Img","div","props","img","SpanMainKeyWord","span","a11yHidden","css","App","mainKeyWord","useRef","ImgBackGroundRef","useState","startX","setStartX","startY","setStartY","bgPosX","setBgPosX","bgPosY","setBgPosY","movePosX","setMovePosX","movePosY","setMovePosY","useEffect","mainKeyword","current","keywordAnimation","a","loopCount","textSplit","count","reduce","acc","obj","push","split","concat","length","append","textContent","onMouseEnter","useCallback","e","currentTarget","style","transition","clientX","clientY","offsetTop","offsetLeft","onMouseMove","left","top","onMouseOut","ref","Myimg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f56d0e2.chunk.js","sourcesContent":["export const delayletter = () => {\r\n    return new Promise((resolve) => setTimeout(resolve, 200));\r\n}\r\nexport const delayWord = () => {\r\n    return new Promise((resolve) => setTimeout(resolve, 1000));\r\n};\r\n","import React from 'react';\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    \r\n    body {\r\n        -webkit-transition: all 1s;\r\n        transition: all 1s;\r\n        width: 100%;\r\n        margin: 0 auto;\r\n        letter-spacing: -0.025rem;\r\n        font-family: 'Nanum Gothic', sans-serif;\r\n    }\r\n\r\n    body.active {\r\n        overflow: hidden;\r\n        -ms-overflow-style: none;\r\n        /* IE and Edge */\r\n        scrollbar-width: none;\r\n        /* Firefox */\r\n    }\r\n\r\n    body.active::-webkit-scrollbar {\r\n        display: none;\r\n    }\r\n`\r\n\r\nexport default GlobalStyle;","export default __webpack_public_path__ + \"static/media/lilac-bg.f9356c39.jpg\";","import { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { delayletter, delayWord } from './util/commFunction';\r\nimport './App.css';\r\n\r\nimport styled, { css } from 'styled-components';\r\nimport GlobalStyle from './components/GlobalStyle';\r\n\r\nimport Myimg from './images/lilac-bg.jpg'\r\n\r\nconst mainKeywordArray = [\r\n  '깊이 생각하는',\r\n  '끈기있게 탐구하는',\r\n  '문서화를 좋아하는',\r\n];\r\n\r\nconst Main = styled.main`\r\n  font-family: 'Noto Sans KR', sans-serif;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  background: #a2a1dc;\r\n\r\n  & h1 {\r\n      position: absolute;\r\n      color: #1d1720;\r\n      font-size: 4rem;\r\n      font-weight: 400;\r\n      text-shadow: 0 0 40px #e3d0eb;\r\n      opacity: 0;\r\n      line-height: 1.4;\r\n      text-align: left;\r\n      animation: 0.5s linear 0.5s forwards main-text;\r\n\r\n      @keyframes main-text {\r\n      0% {\r\n        opacity: 0;\r\n      }\r\n      100% {\r\n        opacity: 1;\r\n      }\r\n    }\r\n  }\r\n`\r\n//img -> div https://stackoverflow.com/questions/8200204/fit-background-image-to-div\r\nconst Img = styled.div`\r\n  position: absolute;\r\n  top: -100px;\r\n  left: -100px;\r\n  z-index: 0;\r\n  width: calc(100% + 200px);\r\n  height: calc(100% + 200px);\r\n  \r\n  opacity: 0.9;\r\n  transition: all 0.3s linear 0s;\r\n  \r\n  background-image: url(${props => props.img});\r\n  background-size: cover ;\r\n`\r\n\r\nconst SpanMainKeyWord = styled.span`\r\n  padding-right: 5px;\r\n  font-weight: 600;\r\n  animation: 0.1s linear infinite keyword-typing-effect;\r\n\r\n  ${props => props.a11yHidden &&\r\n    css`\r\n      overflow: hidden;\r\n      position: absolute;\r\n      width: 1px;\r\n      height: 1px;\r\n      clip: rect(0, 0, 0, 0);\r\n      clip-path: polygon(0 0, 0 0, 0 0);\r\n    `\r\n  }\r\n\r\n  @keyframes keyword-typing-effect {\r\n    0% {\r\n      border-right: 4px solid transparent;\r\n    }\r\n    100% {\r\n      border-right: 4px solid #1d1720;\r\n    }\r\n  }\r\n`\r\n\r\nfunction App() {\r\n  const mainKeyWord = useRef()\r\n  const ImgBackGroundRef = useRef()\r\n\r\n  let [startX, setStartX] = useState(0)\r\n  let [startY, setStartY] = useState(0)\r\n\r\n  let [bgPosX, setBgPosX] = useState(0)\r\n  let [bgPosY, setBgPosY] = useState(0)\r\n\r\n  let [movePosX, setMovePosX] = useState(0)\r\n  let [movePosY, setMovePosY] = useState(0)\r\n\r\n  useEffect(() => {\r\n    const mainKeyword = mainKeyWord.current\r\n\r\n    const keywordAnimation = async (loopCount = 0) => {\r\n      let textSplit = [];\r\n      let count = 0;\r\n\r\n      textSplit = mainKeywordArray.reduce((acc, current) => {\r\n        let obj = []\r\n        obj.push(current.split(''))\r\n        acc = acc.concat(obj)\r\n        return acc\r\n      }, [])\r\n\r\n      while (loopCount !== textSplit.length && count < textSplit[loopCount].length) {\r\n        // 글자 노출\r\n        await delayletter();\r\n        mainKeyword.append(textSplit[loopCount][count]);\r\n\r\n        // 끝나면 초기화\r\n        if (count === textSplit[loopCount].length - 1) {\r\n          await delayWord();\r\n\r\n          textSplit.length - 1 === loopCount\r\n            ? keywordAnimation((loopCount = 0))\r\n            : keywordAnimation(loopCount + 1);\r\n\r\n          mainKeyword.textContent = '';\r\n          return false;\r\n        }\r\n        count++;\r\n      }\r\n    };\r\n\r\n    keywordAnimation();\r\n  }, [])\r\n\r\n  const onMouseEnter = useCallback((e) => {\r\n    e.currentTarget.style.transition = 'none'\r\n    // 시작 좌표\r\n    setStartX(e.clientX)\r\n    setStartY(e.clientY)\r\n\r\n    // background 좌표\r\n    setBgPosX(ImgBackGroundRef.current.offsetTop)\r\n    setBgPosY(ImgBackGroundRef.current.offsetLeft)\r\n  }, [])\r\n\r\n  const onMouseMove = useCallback((e) => {\r\n    setMovePosX(e.clientX - startX);\r\n    setMovePosY(e.clientY - startY);\r\n\r\n    ImgBackGroundRef.current.style.left = `${bgPosX - movePosX / 40}px`;\r\n    ImgBackGroundRef.current.style.top = `${bgPosY - movePosY / 40}px`;\r\n  }, [bgPosX, bgPosY, movePosX, movePosY, startX, startY])\r\n\r\n  const onMouseOut = useCallback((e) => {\r\n    setBgPosX(-100)\r\n    setBgPosY(-100)\r\n    ImgBackGroundRef.current.style.transition = 'all linear 0.3s';\r\n    ImgBackGroundRef.current.style.top = `${bgPosY}px`;\r\n    ImgBackGroundRef.current.style.left = `${bgPosX}px`;\r\n  }, [bgPosX, bgPosY])\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Main>\r\n        <Img\r\n          ref={ImgBackGroundRef}\r\n          img={Myimg}\r\n          onMouseEnter={onMouseEnter}\r\n          onMouseMove={onMouseMove}\r\n          onMouseOut={onMouseOut}\r\n        />\r\n        <h1>\r\n          안녕하세요!&nbsp;\r\n          <SpanMainKeyWord a11yHidden={true} >\r\n            '깊이 생각하는', '끈기있게 탐구하는', '문서화를 좋아하는',\r\n          </SpanMainKeyWord>\r\n\r\n          <SpanMainKeyWord ref={mainKeyWord}></SpanMainKeyWord><br />\r\n          프론트엔드 개발자 오세현입니다 :D\r\n        </h1>\r\n      </Main>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}