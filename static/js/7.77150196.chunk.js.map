{"version":3,"sources":["util/lib/commFunction.js","components/comm/Portal.js","components/comm/Modoal.js","components/comm/Loader.js","components/Footer.js"],"names":["delayletter","Promise","resolve","setTimeout","delayWord","mainKeywordArray","postCodeStyle","display","position","top","left","width","height","padding","Portal","children","elementId","element","document","querySelector","ReactDOM","createPortal","Modal","className","onClose","maskClosable","visible","closable","ModalOverlay","ModalWrapper","onClick","e","target","currentTarget","tabIndex","ModalInner","styled","div","props","theme","common","Overlay","Loader","type","color","message","LoaderOverlay","LoadingWrapper","Footer","footerForwardRef","SERVICE_ID","process","REACT_APP_SERVICE_ID","TEMPLATE_ID","REACT_APP_TEMPLATE_ID","USER_ID","REACT_APP_USER_ID","useForm","register","handleSubmit","watch","errors","formState","setValue","control","useState","isAddress","setIsAddress","isPostOpen","setIsPostOpen","modalVisible","setModalVisible","loading","setLoading","addressControlRef","useRef","handleFormSubmit","useCallback","emailjs","send","then","result","text","alert","error","console","openModal","closeModal","eventAction","action","name","handleAddressClick","handleAddressFocus","handleComplete","data","fullAddress","address","extraAddress","addressType","bname","buildingName","current","value","FooterWrapper","id","ref","FooterTop","onSubmit","FormWrapper","required","maxLength","placeholder","render","RequiredText","htmlFor","onChange","onBlur","onFocus","rows","SubmitButton","FooterBottom","style","onComplete","dotenv","config","prototype","PropTypes","shape","component","instanceOf","React","Component","forwardRef","footer","colors","darkPurple","InlineBlockSpanUnderLine","device","mobile","button","p"],"mappings":"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","file":"static/js/7.77150196.chunk.js","sourcesContent":["export const delayletter = () => {\n    return new Promise((resolve) => setTimeout(resolve, 200));\n}\nexport const delayWord = () => {\n    return new Promise((resolve) => setTimeout(resolve, 1000));\n};\n\nexport const mainKeywordArray = [\n    '깊이있게 탐구하는',\n    '끈기있게 노력하는',\n    '문서화를 잘하는',\n];\n\nexport const postCodeStyle = {\n    display: \"block\",\n    position: \"absolute\",\n    // top: \"50%\",\n    top: \"-200%\",\n    left: \"-10%\",\n    width: \"400px\",\n    height: \"500px\",\n    padding: \"7px\",\n};\n","import ReactDOM from 'react-dom';\n\nexport default function Portal({ children, elementId }) {\n    const element = document.querySelector(elementId)\n\n    return (\n        ReactDOM.createPortal(children, element)\n    );\n}\n\n\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport styled from 'styled-components'\n// import CloseButton from './CloseButton'\n\nfunction Modal({ className, onClose, maskClosable, closable, visible, children, }) {\n\n    const onMaskClick = (e) => {\n        if (e.target === e.currentTarget) {\n            onClose(e)\n        }\n    }\n\n    // const close = (e) => {\n    //     if (onClose) {\n    //         onClose(e)\n    //     }\n    // }\n    return (\n        <>\n            <ModalOverlay visible={visible} />\n            <ModalWrapper\n                className={className}\n                onClick={maskClosable ? onMaskClick : null}\n                tabIndex=\"-1\"\n                visible={visible}\n            >\n                <ModalInner tabIndex=\"0\" className=\"modal-inner\">\n                    {/* {closable && <CloseButton className=\"modal-close\" onClick={close} />} */}\n                    {children}\n                </ModalInner>\n            </ModalWrapper>\n        </>\n    )\n}\n\nModal.propTypes = {\n    visible: PropTypes.bool,\n}\n\nexport default Modal\n\nconst ModalWrapper = styled.div`\n  display: ${(props) => (props.visible ? 'block' : 'none')};\n  ${({ theme }) => theme.common.Overlay};\n  z-index: 1000;\n  overflow: auto;\n  outline: 0;\n`\n\nconst ModalOverlay = styled.div`\n  box-sizing: border-box;\n  display: ${(props) => (props.visible ? 'block' : 'none')};\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 999;\n`\n\nconst ModalInner = styled.div`\n  box-sizing: border-box;\n  position: relative;\n  box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\n  background-color: #fff;\n  border-radius: 10px;\n  width: 360px;\n  max-width: 480px;\n  top: 50%;\n  transform: translateY(-50%);\n  margin: 0 auto;\n  padding: 40px 20px;\n`","import React from 'react';\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components';\n\nimport ReactLoading from 'react-loading';\n\nfunction Loader({ type, color, message }) {\n    return (\n        <>\n            <LoaderOverlay />\n            <LoadingWrapper>\n                <ReactLoading\n                    type={type}\n                    color={color}\n                    height={'100%'}\n                    width={'100%'}\n                />\n                <h2 className=\"msg-text1\">{message}</h2>\n                <h2 className=\"msg-text2\">잠시만 기다려주세요.</h2>\n            </LoadingWrapper>\n        </>\n    );\n}\n\nLoader.propTypes = {\n    type: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired,\n}\n\nexport default Loader;\n\nconst LoaderOverlay = styled.div`\n  display: block;\n  ${({ theme }) => theme.common.Overlay};\n  background-color: #fff;\n  z-index: -3;\n`\n\nconst LoadingWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n\n    & .msg-text1 {\n        margin-top: 30px;\n        font-size: 1.1rem;\n        line-height: 1.3;\n    }\n\n    & .msg-text2{\n        font-size: 1.1rem;\n        line-height: 1.3;\n    }\n`","import React, { forwardRef, useCallback, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { Controller, useForm } from 'react-hook-form';\nimport { ErrorMessage } from '@hookform/error-message';\n\nimport dotenv from \"dotenv\";\nimport emailjs from 'emailjs-com';\nimport DaumPostcode from 'react-daum-postcode';\n\nimport { postCodeStyle } from '../util/lib/commFunction';\n\nimport Portal from './comm/Portal'\nimport Modal from './comm/Modoal';\nimport Loader from './comm/Loader';\n\n\ndotenv.config();\nfunction Footer({ footerForwardRef }) {\n    const SERVICE_ID = process.env.REACT_APP_SERVICE_ID;\n    const TEMPLATE_ID = process.env.REACT_APP_TEMPLATE_ID;\n    const USER_ID = process.env.REACT_APP_USER_ID;\n\n    const { register, handleSubmit, watch, formState: { errors }, setValue, control } = useForm();\n\n    const [isAddress, setIsAddress] = useState(\"\");\n    const [isPostOpen, setIsPostOpen] = useState(false)\n\n    const [modalVisible, setModalVisible] = useState(false)\n    const [loading, setLoading] = useState(null);\n\n    const addressControlRef = useRef()\n\n    const handleFormSubmit = useCallback((e) => {\n        setLoading(true)\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, watch(), USER_ID)\n            .then((result) => {\n                if (result.text === 'OK') {\n                    setLoading(false)\n                    alert('감사합니다 : )\\n빠른시일안에 답변드리겠습니다!')\n                }\n            }, (error) => {\n                console.error(error);\n                alert('메세지 전송에 실패하였습니다.')\n            });\n\n    }, [SERVICE_ID, TEMPLATE_ID, USER_ID, watch])\n\n    const openModal = useCallback((e) => setModalVisible(true), [])\n    const closeModal = useCallback((e) => setModalVisible(false), [])\n\n    const eventAction = useCallback((e, action) => {\n        switch (e.target.name) {\n            case 'address':\n                openModal()\n                setIsPostOpen(true)\n                break;\n            default:\n                break;\n        }\n    }, [openModal])\n\n    const handleAddressClick = useCallback((e) => eventAction(e, 'handleAddressClick'), [eventAction])\n    const handleAddressFocus = useCallback((e) => eventAction(e, 'handleAddressFocus'), [eventAction])\n\n    // 다음 API 이벤트\n    const handleComplete = useCallback((data) => {\n        let fullAddress = data.address;\n        let extraAddress = \"\";\n\n        if (data.addressType === \"R\") {\n            if (data.bname !== \"\") {\n                extraAddress += data.bname;\n            }\n            if (data.buildingName !== \"\") {\n                extraAddress +=\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\n            }\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\n        }\n        setIsAddress(fullAddress);\n\n        //제어 컴포넌트\n        setValue(\"address\", addressControlRef.current.value)\n\n        //입력 후 모달 닫기\n        closeModal()\n        setIsPostOpen(false);\n    }, [closeModal, setValue]);\n\n    return (\n        <>\n            <FooterWrapper id='footer' ref={footerForwardRef}>\n                <FooterTop>\n                    <h2><span><b>CONTACT</b> ME</span></h2>\n                    <form onSubmit={handleSubmit(handleFormSubmit)}>\n                        <FormWrapper className=\"form-wrap\">\n                            <fieldset className=\"form-group\">\n                                <label>Name :</label>\n                                <input\n                                    type='text'\n                                    name='name'\n                                    {...register(\"name\", { required: \"필수 입력 사항입니다.\", maxLength: 50 })}\n                                    placeholder=\"이름 / 회사명을 입력해주세요.\"\n                                />\n                                <ErrorMessage\n                                    errors={errors}\n                                    name=\"name\"\n                                    render={({ message }) => <RequiredText>{message}</RequiredText>}\n                                />\n                            </fieldset>\n\n                            <fieldset className=\"form-group\">\n                                <label htmlFor=\"email\"><em>Your</em> Email Address :</label>\n                                <input\n                                    id=\"email\"\n                                    className=\"email\"\n                                    name=\"email\"\n                                    type=\"email\"\n                                    {...register(\"email\", { required: true, maxLength: 50 })}\n                                    placeholder=\"이메일을 입력해주세요.\"\n                                />\n                                <span className=\"email-warning\">* 이메일 형식에 맞게 입력해주세요.</span>\n                            </fieldset>\n\n                            <fieldset className=\"form-group\">\n                                <label>Adress :</label>\n                                <Controller\n                                    control={control}\n                                    name=\"address\"\n                                    render={({ onChange, onBlur, value }) => (\n                                        <input\n                                            name=\"address\"\n                                            onClick={handleAddressClick}\n                                            onFocus={handleAddressFocus}\n                                            ref={addressControlRef}\n                                            value={isAddress}\n                                            onChange={e => {\n                                                setValue(\"address\", isAddress)\n                                            }}\n                                            placeholder=\"주소를 입력해주세요.\"\n                                        />\n                                    )}\n                                    {...register(\"address\", { required: \"필수 입력 사항입니다.\" })}\n                                />\n                                <ErrorMessage\n                                    errors={errors}\n                                    name=\"address\"\n                                    render={({ message }) => {\n                                        return (\n                                            <RequiredText>{message}</RequiredText>\n                                        )\n                                    }}\n                                />\n                            </fieldset>\n\n                            <fieldset className=\"form-group\">\n                                <label htmlFor=\"email\">Detail Address :</label>\n                                <input\n                                    id=\"detail\"\n                                    className=\"detail\"\n                                    name=\"detail\"\n                                    type=\"detail\"\n                                    {...register(\"detail\", { required: true, maxLength: 50 })}\n                                    placeholder=\"상세 주소를 입력해주세요.\"\n                                />\n\n                            </fieldset>\n\n                            <fieldset className=\"form-group\">\n                                <label htmlFor=\"message\">Message: </label>\n                                <textarea\n                                    id=\"message\"\n                                    className=\"message\"\n                                    name=\"message\"\n                                    rows=\"10\"\n                                    placeholder=\"메세지를 입력해주세요.\"\n                                    {...register(\"message\", { required: true })}\n                                ></textarea>\n                            </fieldset>\n                            <SubmitButton className='submit-btn'>SEND MESSAGE</SubmitButton>\n                        </FormWrapper>\n                    </form>\n                </FooterTop>\n                <FooterBottom>\n                    <small>&copy; 2021 by OH SEHYUN. All rights reserved.</small>\n                </FooterBottom>\n            </FooterWrapper>\n\n            {\n                modalVisible &&\n                (\n                    <>\n                        <Portal\n                            elementId={'#daumAddressModal'}\n                        >\n                            <Modal\n                                visible={modalVisible}\n                                closable={true}\n                                maskClosable={true}\n                                onClose={closeModal}>\n                                {\n                                    isPostOpen\n                                        ? (\n                                            <DaumPostcode\n                                                style={postCodeStyle}\n                                                onComplete={handleComplete}\n                                            />\n                                        ) : null\n                                }\n                            </Modal>\n                        </Portal>\n                    </>\n                )\n            }\n\n            {\n                loading &&\n                <>\n                    <Portal\n                        elementId={'#loading'}\n                    >\n                        <Loader type=\"spokes\" color=\"black\" message={'데이터 처리중 입니다.'} />\n                    </Portal>\n                </>\n            }\n        </>\n    );\n}\nFooter.prototype = {\n    footerForwardRef: PropTypes.shape({ component: PropTypes.instanceOf(React.Component) }),\n};\n\nexport default forwardRef(Footer);\n\nconst FooterWrapper = styled.footer`\n    display: block;\n    position: relative;\n    padding: 100px 0 0;\n    box-sizing: border-box;\n    color: #fff;\n    background: ${({ theme }) => theme.colors.darkPurple};\n    overflow: hidden;\n\n    text-align: center;\n \n    &::before{\n        content: '';\n        width: 120%;\n        position: absolute;\n        top: -72px;\n        background: #f2f2f2;\n        transform: rotate(3deg) ;\n        height: 150px;\n        display: block;\n    }\n`;\nconst FooterTop = styled.div`\n\n    & h2 {\n        color: #fff;\n        font-weight: 400;\n        display: inline-block;\n        margin: 50px 0 ;\n        font-size: 2.2rem;\n        \n        & span {\n            display: inline-block;\n\n            &::after{\n                ${({ theme }) => theme.common.InlineBlockSpanUnderLine};\n            }\n        }       \n    }\n`;\n\nconst FormWrapper = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    justify-content: space-between;\n    max-width: 1200px;\n    margin: 0 auto;\n    width: 46%;\n    \n    & fieldset {\n        border: none;\n        width: 47%;\n        padding: 0;\n        text-align: left;\n        box-sizing: border-box;\n\n        & label{\n            display: block;\n            width: 100%;\n            margin-top: 20px;\n        }\n        \n        & input {\n            width: 100%;\n            margin-top: 8px;\n            padding: 15px 10px;\n            border-radius: 5px;\n            border: none;\n            box-sizing: border-box;\n            font-size: 0.8rem;\n        }\n        \n        & .email-warning {\n            font-size: 0.75rem;\n            color: #fff69d;\n        }\n\n        &:nth-child(5){\n            width: 100%;\n            \n            & textarea{\n                border-radius: 5px;\n                width: 100%;   \n                margin-top: 8px; \n                padding: 15px 10px;\n                box-sizing: border-box;\n                border: none;\n                font-size: 0.94rem;\n                line-height: 1.3;\n            }\n        }\n    }\n\n    @media ${({ theme }) => theme.device.mobile} {\n        width: 85%;\n    }\n`\nconst FooterBottom = styled.div`\n    color: #bebebe;\n    text-align: center;\n    margin-top: 100px;\n    padding-bottom: 50px;\n    line-height: 1.3;\n\n    & small{\n        font-size: 80%;\n    }\n\n`;\n\nconst SubmitButton = styled.button`\n    margin-top: 20px;\n    padding: 15px 35px;\n    border: 2px solid #fff;\n    color: #fff;\n    border-radius: 50px;\n    background: ${({ theme }) => theme.colors.darkPurple};\n    cursor: pointer;\n`\n\nconst RequiredText = styled.p`\n    font-size: 0.9rem;\n    margin-top: 1px;\n    color: #bf1650;\n\n     &::before {\n        content: \"⚠ \";\n        display: inline;\n     }\n`;"],"sourceRoot":""}