{"version":3,"sources":["util/lib/commFunction.js","components/comm/Portal.js","components/comm/Modoal.js","components/comm/Loader.js","components/Footer.js"],"names":["delayletter","Promise","resolve","setTimeout","delayWord","mainKeywordArray","postCodeStyle","display","position","top","left","width","height","padding","Portal","children","elementId","element","document","querySelector","ReactDOM","createPortal","Modal","className","onClose","maskClosable","visible","closable","ModalOverlay","ModalWrapper","onClick","e","target","currentTarget","tabIndex","ModalInner","styled","div","props","theme","common","Overlay","Loader","type","color","message","LoaderOverlay","LoadingWrapper","Footer","footerForwardRef","SERVICE_ID","process","TEMPLATE_ID","USER_ID","useForm","register","handleSubmit","watch","errors","formState","setValue","control","useState","isAddress","setIsAddress","isPostOpen","setIsPostOpen","modalVisible","setModalVisible","loading","setLoading","addressControlRef","useRef","handleFormSubmit","useCallback","emailjs","send","then","result","text","alert","error","console","openModal","closeModal","eventAction","action","name","handleAddressClick","handleAddressFocus","handleComplete","data","fullAddress","address","extraAddress","addressType","bname","buildingName","current","value","FooterWrapper","id","ref","FooterTop","onSubmit","FormWrapper","required","maxLength","placeholder","render","RequiredText","htmlFor","onChange","onBlur","onFocus","rows","SubmitButton","FooterBottom","style","onComplete","dotenv","config","prototype","PropTypes","shape","component","instanceOf","React","Component","forwardRef","footer","colors","darkPurple","InlineBlockSpanUnderLine","device","mobile","button","p"],"mappings":"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","file":"static/js/7.adcd405f.chunk.js","sourcesContent":["export const delayletter = () => {\r\n    return new Promise((resolve) => setTimeout(resolve, 200));\r\n}\r\nexport const delayWord = () => {\r\n    return new Promise((resolve) => setTimeout(resolve, 1000));\r\n};\r\n\r\nexport const mainKeywordArray = [\r\n    '깊이있게 탐구하는',\r\n    '끈기있게 노력하는',\r\n    '문서화를 잘하는',\r\n];\r\n\r\nexport const postCodeStyle = {\r\n    display: \"block\",\r\n    position: \"absolute\",\r\n    // top: \"50%\",\r\n    top: \"-200%\",\r\n    left: \"-10%\",\r\n    width: \"400px\",\r\n    height: \"500px\",\r\n    padding: \"7px\",\r\n};\r\n","import ReactDOM from 'react-dom';\r\n\r\nexport default function Portal({ children, elementId }) {\r\n    const element = document.querySelector(elementId)\r\n\r\n    return (\r\n        ReactDOM.createPortal(children, element)\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n// import CloseButton from './CloseButton'\r\n\r\nfunction Modal({ className, onClose, maskClosable, closable, visible, children, }) {\r\n\r\n    const onMaskClick = (e) => {\r\n        if (e.target === e.currentTarget) {\r\n            onClose(e)\r\n        }\r\n    }\r\n\r\n    const close = (e) => {\r\n        if (onClose) {\r\n            onClose(e)\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <ModalOverlay visible={visible} />\r\n            <ModalWrapper\r\n                className={className}\r\n                onClick={maskClosable ? onMaskClick : null}\r\n                tabIndex=\"-1\"\r\n                visible={visible}\r\n            >\r\n                <ModalInner tabIndex=\"0\" className=\"modal-inner\">\r\n                    {/* {closable && <CloseButton className=\"modal-close\" onClick={close} />} */}\r\n                    {children}\r\n                </ModalInner>\r\n            </ModalWrapper>\r\n        </>\r\n    )\r\n}\r\n\r\nModal.propTypes = {\r\n    visible: PropTypes.bool,\r\n}\r\n\r\nexport default Modal\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: ${(props) => (props.visible ? 'block' : 'none')};\r\n  ${({ theme }) => theme.common.Overlay};\r\n  z-index: 1000;\r\n  overflow: auto;\r\n  outline: 0;\r\n`\r\n\r\nconst ModalOverlay = styled.div`\r\n  box-sizing: border-box;\r\n  display: ${(props) => (props.visible ? 'block' : 'none')};\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  z-index: 999;\r\n`\r\n\r\nconst ModalInner = styled.div`\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  box-shadow: 0 0 6px 0 rgba(0, 0, 0, 0.5);\r\n  background-color: #fff;\r\n  border-radius: 10px;\r\n  width: 360px;\r\n  max-width: 480px;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  margin: 0 auto;\r\n  padding: 40px 20px;\r\n`","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components';\r\n\r\nimport ReactLoading from 'react-loading';\r\n\r\nfunction Loader({ type, color, message }) {\r\n    return (\r\n        <>\r\n            <LoaderOverlay />\r\n            <LoadingWrapper>\r\n                <ReactLoading\r\n                    type={type}\r\n                    color={color}\r\n                    height={'100%'}\r\n                    width={'100%'}\r\n                />\r\n                <h2 className=\"msg-text1\">{message}</h2>\r\n                <h2 className=\"msg-text2\">잠시만 기다려주세요.</h2>\r\n            </LoadingWrapper>\r\n        </>\r\n    );\r\n}\r\n\r\nLoader.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    color: PropTypes.string.isRequired,\r\n    message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Loader;\r\n\r\nconst LoaderOverlay = styled.div`\r\n  display: block;\r\n  ${({ theme }) => theme.common.Overlay};\r\n  background-color: #fff;\r\n  z-index: -3;\r\n`\r\n\r\nconst LoadingWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n\r\n    & .msg-text1 {\r\n        margin-top: 30px;\r\n        font-size: 1.1rem;\r\n        line-height: 1.3;\r\n    }\r\n\r\n    & .msg-text2{\r\n        font-size: 1.1rem;\r\n        line-height: 1.3;\r\n    }\r\n`","import React, { forwardRef, useCallback, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nimport { Controller, useForm } from 'react-hook-form';\r\nimport { ErrorMessage } from '@hookform/error-message';\r\n\r\nimport dotenv from \"dotenv\";\r\nimport emailjs from 'emailjs-com';\r\nimport DaumPostcode from 'react-daum-postcode';\r\n\r\nimport { postCodeStyle } from '../util/lib/commFunction';\r\n\r\nimport Portal from './comm/Portal'\r\nimport Modal from './comm/Modoal';\r\nimport Loader from './comm/Loader';\r\n\r\n\r\ndotenv.config();\r\nfunction Footer({ footerForwardRef }) {\r\n    const SERVICE_ID = process.env.REACT_APP_SERVICE_ID;\r\n    const TEMPLATE_ID = process.env.REACT_APP_TEMPLATE_ID;\r\n    const USER_ID = process.env.REACT_APP_USER_ID;\r\n\r\n    const { register, handleSubmit, watch, formState: { errors }, setValue, control } = useForm();\r\n\r\n    const [isAddress, setIsAddress] = useState(\"\");\r\n    const [isPostOpen, setIsPostOpen] = useState(false)\r\n\r\n    const [modalVisible, setModalVisible] = useState(false)\r\n    const [loading, setLoading] = useState(null);\r\n\r\n    const addressControlRef = useRef()\r\n\r\n    const handleFormSubmit = useCallback((e) => {\r\n        setLoading(true)\r\n        emailjs.send(SERVICE_ID, TEMPLATE_ID, watch(), USER_ID)\r\n            .then((result) => {\r\n                if (result.text === 'OK') {\r\n                    setLoading(false)\r\n                    alert('감사합니다 : )\\n빠른시일안에 답변드리겠습니다!')\r\n                }\r\n            }, (error) => {\r\n                console.error(error);\r\n                alert('메세지 전송에 실패하였습니다.')\r\n            });\r\n\r\n    }, [SERVICE_ID, TEMPLATE_ID, USER_ID, watch])\r\n\r\n    const openModal = useCallback((e) => setModalVisible(true), [])\r\n    const closeModal = useCallback((e) => setModalVisible(false), [])\r\n\r\n    const eventAction = useCallback((e, action) => {\r\n        switch (e.target.name) {\r\n            case 'address':\r\n                openModal()\r\n                setIsPostOpen(true)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [openModal])\r\n\r\n    const handleAddressClick = useCallback((e) => eventAction(e, 'handleAddressClick'), [eventAction])\r\n    const handleAddressFocus = useCallback((e) => eventAction(e, 'handleAddressFocus'), [eventAction])\r\n\r\n    // 다음 API 이벤트\r\n    const handleComplete = useCallback((data) => {\r\n        let fullAddress = data.address;\r\n        let extraAddress = \"\";\r\n\r\n        if (data.addressType === \"R\") {\r\n            if (data.bname !== \"\") {\r\n                extraAddress += data.bname;\r\n            }\r\n            if (data.buildingName !== \"\") {\r\n                extraAddress +=\r\n                    extraAddress !== \"\" ? `, ${data.buildingName}` : data.buildingName;\r\n            }\r\n            fullAddress += extraAddress !== \"\" ? ` (${extraAddress})` : \"\";\r\n        }\r\n        setIsAddress(fullAddress);\r\n\r\n        //제어 컴포넌트\r\n        setValue(\"address\", addressControlRef.current.value)\r\n\r\n        //입력 후 모달 닫기\r\n        closeModal()\r\n        setIsPostOpen(false);\r\n    }, [closeModal, setValue]);\r\n\r\n    return (\r\n        <>\r\n            <FooterWrapper id='footer' ref={footerForwardRef}>\r\n                <FooterTop>\r\n                    <h2><span><b>CONTACT</b> ME</span></h2>\r\n                    <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n                        <FormWrapper className=\"form-wrap\">\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Name :</label>\r\n                                <input\r\n                                    type='text'\r\n                                    name='name'\r\n                                    {...register(\"name\", { required: \"필수 입력 사항입니다.\", maxLength: 50 })}\r\n                                    placeholder=\"이름 / 회사명을 입력해주세요.\"\r\n                                />\r\n                                <ErrorMessage\r\n                                    errors={errors}\r\n                                    name=\"name\"\r\n                                    render={({ message }) => <RequiredText>{message}</RequiredText>}\r\n                                />\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label htmlFor=\"email\"><em>Your</em> Email Address :</label>\r\n                                <input\r\n                                    id=\"email\"\r\n                                    className=\"email\"\r\n                                    name=\"email\"\r\n                                    type=\"email\"\r\n                                    {...register(\"email\", { required: true, maxLength: 50 })}\r\n                                    placeholder=\"이메일을 입력해주세요.\"\r\n                                />\r\n                                <span className=\"email-warning\">* 이메일 형식에 맞게 입력해주세요.</span>\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label>Adress :</label>\r\n                                <Controller\r\n                                    control={control}\r\n                                    name=\"address\"\r\n                                    render={({ onChange, onBlur, value }) => (\r\n                                        <input\r\n                                            name=\"address\"\r\n                                            onClick={handleAddressClick}\r\n                                            onFocus={handleAddressFocus}\r\n                                            ref={addressControlRef}\r\n                                            value={isAddress}\r\n                                            onChange={e => {\r\n                                                setValue(\"address\", isAddress)\r\n                                            }}\r\n                                            placeholder=\"주소를 입력해주세요.\"\r\n                                        />\r\n                                    )}\r\n                                    {...register(\"address\", { required: \"필수 입력 사항입니다.\" })}\r\n                                />\r\n                                <ErrorMessage\r\n                                    errors={errors}\r\n                                    name=\"address\"\r\n                                    render={({ message }) => {\r\n                                        return (\r\n                                            <RequiredText>{message}</RequiredText>\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label htmlFor=\"email\">Detail Address :</label>\r\n                                <input\r\n                                    id=\"detail\"\r\n                                    className=\"detail\"\r\n                                    name=\"detail\"\r\n                                    type=\"detail\"\r\n                                    {...register(\"detail\", { required: true, maxLength: 50 })}\r\n                                    placeholder=\"상세 주소를 입력해주세요.\"\r\n                                />\r\n\r\n                            </fieldset>\r\n\r\n                            <fieldset className=\"form-group\">\r\n                                <label htmlFor=\"message\">Message: </label>\r\n                                <textarea\r\n                                    id=\"message\"\r\n                                    className=\"message\"\r\n                                    name=\"message\"\r\n                                    rows=\"10\"\r\n                                    placeholder=\"메세지를 입력해주세요.\"\r\n                                    {...register(\"message\", { required: true })}\r\n                                ></textarea>\r\n                            </fieldset>\r\n                            <SubmitButton className='submit-btn'>SEND MESSAGE</SubmitButton>\r\n                        </FormWrapper>\r\n                    </form>\r\n                </FooterTop>\r\n                <FooterBottom>\r\n                    <small>&copy; 2021 by OH SEHYUN. All rights reserved.</small>\r\n                </FooterBottom>\r\n            </FooterWrapper>\r\n\r\n            {\r\n                modalVisible &&\r\n                (\r\n                    <>\r\n                        <Portal\r\n                            elementId={'#daumAddressModal'}\r\n                        >\r\n                            <Modal\r\n                                visible={modalVisible}\r\n                                closable={true}\r\n                                maskClosable={true}\r\n                                onClose={closeModal}>\r\n                                {\r\n                                    isPostOpen\r\n                                        ? (\r\n                                            <DaumPostcode\r\n                                                style={postCodeStyle}\r\n                                                onComplete={handleComplete}\r\n                                            />\r\n                                        ) : null\r\n                                }\r\n                            </Modal>\r\n                        </Portal>\r\n                    </>\r\n                )\r\n            }\r\n\r\n            {\r\n                loading &&\r\n                <>\r\n                    <Portal\r\n                        elementId={'#loading'}\r\n                    >\r\n                        <Loader type=\"spokes\" color=\"black\" message={'데이터 처리중 입니다.'} />\r\n                    </Portal>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n}\r\nFooter.prototype = {\r\n    footerForwardRef: PropTypes.shape({ component: PropTypes.instanceOf(React.Component) }),\r\n};\r\n\r\nexport default forwardRef(Footer);\r\n\r\nconst FooterWrapper = styled.footer`\r\n    display: block;\r\n    position: relative;\r\n    padding: 100px 0 0;\r\n    box-sizing: border-box;\r\n    color: #fff;\r\n    background: ${({ theme }) => theme.colors.darkPurple};\r\n    overflow: hidden;\r\n\r\n    text-align: center;\r\n \r\n    &::before{\r\n        content: '';\r\n        width: 120%;\r\n        position: absolute;\r\n        top: -72px;\r\n        background: #f2f2f2;\r\n        transform: rotate(3deg) ;\r\n        height: 150px;\r\n        display: block;\r\n    }\r\n`;\r\nconst FooterTop = styled.div`\r\n\r\n    & h2 {\r\n        color: #fff;\r\n        font-weight: 400;\r\n        display: inline-block;\r\n        margin: 50px 0 ;\r\n        font-size: 2.2rem;\r\n        \r\n        & span {\r\n            display: inline-block;\r\n\r\n            &::after{\r\n                ${({ theme }) => theme.common.InlineBlockSpanUnderLine};\r\n            }\r\n        }       \r\n    }\r\n`;\r\n\r\nconst FormWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-between;\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    width: 46%;\r\n    \r\n    & fieldset {\r\n        border: none;\r\n        width: 47%;\r\n        padding: 0;\r\n        text-align: left;\r\n        box-sizing: border-box;\r\n\r\n        & label{\r\n            display: block;\r\n            width: 100%;\r\n            margin-top: 20px;\r\n        }\r\n        \r\n        & input {\r\n            width: 100%;\r\n            margin-top: 8px;\r\n            padding: 15px 10px;\r\n            border-radius: 5px;\r\n            border: none;\r\n            box-sizing: border-box;\r\n            font-size: 0.8rem;\r\n        }\r\n        \r\n        & .email-warning {\r\n            font-size: 0.75rem;\r\n            color: #fff69d;\r\n        }\r\n\r\n        &:nth-child(5){\r\n            width: 100%;\r\n            \r\n            & textarea{\r\n                border-radius: 5px;\r\n                width: 100%;   \r\n                margin-top: 8px; \r\n                padding: 15px 10px;\r\n                box-sizing: border-box;\r\n                border: none;\r\n                font-size: 0.94rem;\r\n                line-height: 1.3;\r\n            }\r\n        }\r\n    }\r\n\r\n    @media ${({ theme }) => theme.device.mobile} {\r\n        width: 85%;\r\n    }\r\n`\r\nconst FooterBottom = styled.div`\r\n    color: #bebebe;\r\n    text-align: center;\r\n    margin-top: 100px;\r\n    padding-bottom: 50px;\r\n    line-height: 1.3;\r\n\r\n    & small{\r\n        font-size: 80%;\r\n    }\r\n\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n    margin-top: 20px;\r\n    padding: 15px 35px;\r\n    border: 2px solid #fff;\r\n    color: #fff;\r\n    border-radius: 50px;\r\n    background: ${({ theme }) => theme.colors.darkPurple};\r\n    cursor: pointer;\r\n`\r\n\r\nconst RequiredText = styled.p`\r\n    font-size: 0.9rem;\r\n    margin-top: 1px;\r\n    color: #bf1650;\r\n\r\n     &::before {\r\n        content: \"⚠ \";\r\n        display: inline;\r\n     }\r\n`;"],"sourceRoot":""}